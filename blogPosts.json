{
  "blogPosts": [
    {
      "id": 1,
      "title": "10 Git Commands Every Developer Should Know",
      "content": "<p>Master these essential Git commands to improve your workflow and collaboration.</p>\n\n<h2>1. Git Status</h2>\n<p>The <code>git status</code> command shows the state of your working directory and staging area. It lets you see which changes have been staged, which haven't, and which files aren't being tracked by Git.</p>\n\n<h2>2. Git Branch</h2>\n<p>Use <code>git branch</code> to list, create, or delete branches. Branches are an essential part of the Git workflow, allowing you to work on features or fixes in isolation.</p>\n\n<h2>3. Git Checkout</h2>\n<p>The <code>git checkout</code> command lets you navigate between branches. Use <code>git checkout -b new-branch</code> to create a new branch and switch to it in one command.</p>\n\n<h2>4. Git Add</h2>\n<p>Use <code>git add</code> to add files to the staging area. You can add specific files with <code>git add filename</code> or all changes with <code>git add .</code></p>\n\n<h2>5. Git Commit</h2>\n<p>The <code>git commit</code> command captures a snapshot of the project's currently staged changes. Use <code>git commit -m \"Your message\"</code> to add a descriptive message.</p>\n\n<h2>6. Git Push</h2>\n<p>Use <code>git push</code> to upload local repository content to a remote repository. The basic command is <code>git push origin branch-name</code>.</p>\n\n<h2>7. Git Pull</h2>\n<p>The <code>git pull</code> command fetches changes from a remote repository and merges them into your current branch.</p>\n\n<h2>8. Git Merge</h2>\n<p>Use <code>git merge</code> to combine changes from different branches. First checkout the branch you want to merge into, then run <code>git merge branch-name</code>.</p>\n\n<h2>9. Git Stash</h2>\n<p>The <code>git stash</code> command temporarily shelves changes so you can work on something else and come back to them later.</p>\n\n<h2>10. Git Reset</h2>\n<p>Use <code>git reset</code> to undo changes. The command has different options like <code>--soft</code>, <code>--mixed</code>, and <code>--hard</code> depending on how much you want to undo.</p>\n\n<h2>Conclusion</h2>\n<p>Mastering these Git commands will significantly improve your development workflow and make collaboration with other developers much smoother.</p>",
      "author": "Abdullah Esha",
      "authorImage": "/abdullah-circle.png",
      "date": "May 5, 2023",
      "readTime": "6 min read",
      "category": "GitHub",
      "image": "/blog/git-commands.jpg",
      "slug": "10-git-commands-every-developer-should-know",
      "tags": ["Git", "Version Control", "Collaboration"]
    },
    {
      "id": 2,
      "title": "Setting Up a React Project with Best Practices",
      "content": "<p>Learn how to set up a React project with the best practices for maintainability and performance.</p>\n\n<h2>Project Initialization</h2>\n<p>Start by creating a new React project using Create React App or Vite. Vite offers faster build times and a more modern development experience:</p>\n<pre><code>npm create vite@latest my-react-app -- --template react-ts</code></pre>\n\n<h2>Project Structure</h2>\n<p>Organize your project with a clear folder structure:</p>\n<pre><code>src/\n  assets/       # Static files like images\n  components/   # Reusable UI components\n  hooks/        # Custom React hooks\n  pages/        # Page components\n  services/     # API calls and services\n  utils/        # Utility functions\n  App.tsx       # Main App component\n  main.tsx      # Entry point</code></pre>\n\n<h2>State Management</h2>\n<p>For small to medium projects, use React's built-in Context API and useReducer hook. For larger applications, consider Redux Toolkit or Zustand.</p>\n\n<h2>Styling Approaches</h2>\n<p>Choose a styling approach that fits your project:</p>\n<ul>\n  <li>CSS Modules for component-scoped styles</li>\n  <li>Tailwind CSS for utility-first styling</li>\n  <li>Styled-components for CSS-in-JS</li>\n</ul>\n\n<h2>Testing Setup</h2>\n<p>Set up testing with Vitest and React Testing Library:</p>\n<pre><code>npm install -D vitest @testing-library/react @testing-library/jest-dom</code></pre>\n\n<h2>Code Quality Tools</h2>\n<p>Add ESLint and Prettier for code quality and formatting:</p>\n<pre><code>npm install -D eslint prettier eslint-config-prettier</code></pre>\n\n<h2>Performance Optimization</h2>\n<p>Implement performance optimizations:</p>\n<ul>\n  <li>Use React.memo for expensive components</li>\n  <li>Implement code splitting with React.lazy and Suspense</li>\n  <li>Use the useCallback and useMemo hooks appropriately</li>\n</ul>\n\n<h2>Conclusion</h2>\n<p>Following these best practices will help you create a maintainable and performant React application. Adjust these recommendations based on your specific project requirements.</p>",
      "author": "Abdullah Esha",
      "authorImage": "/abdullah-circle.png",
      "date": "May 15, 2023",
      "readTime": "7 min read",
      "category": "React",
      "image": "/blog/practice-react-js.jpg",
      "slug": "setting-up-react-project-with-best-practices",
      "tags": ["React", "Best Practices", "Setup"]
    },
    {
      "id": 3,
      "title": "Optimizing Your cPanel Server for WordPress",
      "content": "<p>Learn how to optimize your cPanel server for better WordPress performance.</p>\n\n<h2>PHP Configuration</h2>\n<p>WordPress performs best with the latest PHP versions. To update PHP in cPanel:</p>\n<ol>\n  <li>Log in to cPanel</li>\n  <li>Go to 'MultiPHP Manager'</li>\n  <li>Select your domain and choose PHP 8.1 or higher</li>\n  <li>Click 'Apply'</li>\n</ol>\n\n<h2>PHP Memory Limits</h2>\n<p>Increase PHP memory limits by creating or editing a php.ini file in your WordPress root directory:</p>\n<pre><code>memory_limit = 256M\nmax_execution_time = 300\npost_max_size = 64M\nupload_max_filesize = 64M</code></pre>\n\n<h2>MySQL Optimization</h2>\n<p>Optimize your MySQL database regularly:</p>\n<ol>\n  <li>Go to 'phpMyAdmin' in cPanel</li>\n  <li>Select your WordPress database</li>\n  <li>Select all tables (check the 'Check All' box)</li>\n  <li>From the dropdown menu, select 'Optimize table'</li>\n</ol>\n\n<h2>Caching Setup</h2>\n<p>Enable caching through cPanel:</p>\n<ol>\n  <li>Go to 'LiteSpeed Cache' in cPanel</li>\n  <li>Enable page caching</li>\n  <li>Configure cache expiration times</li>\n</ol>\n\n<h2>Secure .htaccess Configuration</h2>\n<p>Add these rules to your .htaccess file for better security and performance:</p>\n<pre><code># Enable GZIP compression\n<IfModule mod_deflate.c>\n  AddOutputFilterByType DEFLATE text/html text/plain text/xml text/css text/javascript application/javascript application/x-javascript\n</IfModule>\n\n# Set browser caching\n<IfModule mod_expires.c>\n  ExpiresActive On\n  ExpiresByType image/jpg \"access plus 1 year\"\n  ExpiresByType image/jpeg \"access plus 1 year\"\n  ExpiresByType image/gif \"access plus 1 year\"\n  ExpiresByType image/png \"access plus 1 year\"\n  ExpiresByType text/css \"access plus 1 month\"\n  ExpiresByType application/pdf \"access plus 1 month\"\n  ExpiresByType text/javascript \"access plus 1 month\"\n  ExpiresByType application/javascript \"access plus 1 month\"\n  ExpiresByType image/x-icon \"access plus 1 year\"\n  ExpiresDefault \"access plus 2 days\"\n</IfModule></code></pre>\n\n<h2>Conclusion</h2>\n<p>By implementing these optimizations, you can significantly improve your WordPress site's performance on a cPanel server. Regular maintenance and monitoring are also essential for keeping your site running smoothly.</p>",
      "author": "Abdullah Esha",
      "authorImage": "/abdullah-circle.png",
      "date": "June 3, 2023",
      "readTime": "5 min read",
      "category": "cPanel",
      "image": "/blog/cpanel-setup.jpg",
      "slug": "optimizing-cpanel-server-for-wordpress",
      "tags": ["cPanel", "WordPress", "Optimization"]
    },
    {
      "id": 4,
      "title": "Docker Compose for Local Development",
      "content": "<p>Set up a powerful local development environment using Docker Compose.</p>\n\n<h2>Why Docker for Development?</h2>\n<p>Docker provides consistent development environments across team members, eliminating the \"it works on my machine\" problem. Docker Compose makes it easy to define and run multi-container applications.</p>\n\n<h2>Basic docker-compose.yml</h2>\n<p>Here's a basic docker-compose.yml file for a web application with a database:</p>\n<pre><code>version: '3.8'\n\nservices:\n  app:\n    build: .\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - ./:/app\n    depends_on:\n      - db\n    environment:\n      - DATABASE_URL=postgres://postgres:password@db:5432/mydb\n\n  db:\n    image: postgres:14\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_PASSWORD=password\n      - POSTGRES_DB=mydb\n\nvolumes:\n  postgres_data:</code></pre>\n\n<h2>Adding More Services</h2>\n<p>You can add more services like Redis for caching:</p>\n<pre><code>  redis:\n    image: redis:alpine\n    ports:\n      - \"6379:6379\"</code></pre>\n\n<h2>Development vs Production</h2>\n<p>Create separate docker-compose files for different environments:</p>\n<ul>\n  <li>docker-compose.yml - Base configuration</li>\n  <li>docker-compose.override.yml - Development overrides (automatically used with docker-compose)</li>\n  <li>docker-compose.prod.yml - Production settings</li>\n</ul>\n\n<h2>Useful Docker Compose Commands</h2>\n<p>Here are some essential commands for working with Docker Compose:</p>\n<pre><code># Start services\ndocker-compose up\n\n# Start in detached mode\ndocker-compose up -d\n\n# Stop services\ndocker-compose down\n\n# View logs\ndocker-compose logs\n\n# Rebuild containers\ndocker-compose up --build\n\n# Use production config\ndocker-compose -f docker-compose.yml -f docker-compose.prod.yml up</code></pre>\n\n<h2>Conclusion</h2>\n<p>Docker Compose simplifies the process of setting up and managing local development environments. By defining your application's services in a docker-compose.yml file, you can ensure consistent environments across your team and reduce setup time for new developers.</p>",
      "author": "Abdullah Esha",
      "authorImage": "/abdullah-circle.png",
      "date": "June 20, 2023",
      "readTime": "6 min read",
      "category": "Docker",
      "image": "/blog/docker-setup.png",
      "slug": "docker-compose-for-local-development",
      "tags": ["Docker", "Development", "Compose"]
    },
    {
      "id": 5,
      "title": "Next.js 13 App Router: A Complete Guide",
      "content": "<p>Learn how to use the new App Router in Next.js 13 and beyond.</p>\n\n<h2>Introduction to App Router</h2>\n<p>Next.js 13 introduced the App Router, a new routing system built on React Server Components. It provides a more intuitive file-system based routing approach and enables powerful new patterns.</p>\n\n<h2>File-Based Routing</h2>\n<p>The App Router uses a file-system based router where folders define routes:</p>\n<pre><code>app/                  # App Router\n  layout.tsx         # Root layout (applied to all routes)\n  page.tsx           # Home page (/) \n  about/             # About route (/about)\n    page.tsx         # About page\n  blog/              # Blog route (/blog)\n    [slug]/          # Dynamic route (/blog/post-1)\n      page.tsx       # Blog post page</code></pre>\n\n<h2>Layouts and Templates</h2>\n<p>Layouts allow you to share UI between multiple pages:</p>\n<pre><code>// app/layout.tsx\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <header>My Website</header>\n        {children}\n        <footer>© 2023</footer>\n      </body>\n    </html>\n  )\n}</code></pre>\n\n<h2>Server Components</h2>\n<p>By default, all components in the App Router are React Server Components. This allows you to:</p>\n<ul>\n  <li>Fetch data directly in your components</li>\n  <li>Access backend resources directly</li>\n  <li>Keep sensitive information on the server</li>\n  <li>Reduce client-side JavaScript</li>\n</ul>\n\n<h2>Data Fetching</h2>\n<p>You can fetch data directly in Server Components:</p>\n<pre><code>// app/users/page.tsx\nasync function getUsers() {\n  const res = await fetch('https://api.example.com/users')\n  return res.json()\n}\n\nexport default async function UsersPage() {\n  const users = await getUsers()\n  \n  return (\n    <div>\n      <h1>Users</h1>\n      <ul>\n        {users.map(user => (\n          <li key={user.id}>{user.name}</li>\n        ))}\n      </ul>\n    </div>\n  )\n}</code></pre>\n\n<h2>Client Components</h2>\n<p>When you need interactivity, use Client Components by adding the \"use client\" directive at the top of your file:</p>\n<pre><code>// app/counter.tsx\n\"use client\"\n\nimport { useState } from 'react'\n\nexport default function Counter() {\n  const [count, setCount] = useState(0)\n  \n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  )\n}</code></pre>\n\n<h2>Route Handlers</h2>\n<p>Create API endpoints using route handlers:</p>\n<pre><code>// app/api/users/route.ts\nexport async function GET() {\n  const users = await getUsers()\n  return Response.json(users)\n}\n\nexport async function POST(request) {\n  const data = await request.json()\n  const newUser = await createUser(data)\n  return Response.json(newUser)\n}</code></pre>\n\n<h2>Conclusion</h2>\n<p>The Next.js App Router represents a significant evolution in how we build React applications. By embracing React Server Components and providing an intuitive routing system, it enables more performant and maintainable applications.</p>",
      "author": "Abdullah Esha",
      "authorImage": "/abdullah-circle.png",
      "date": "July 5, 2023",
      "readTime": "8 min read",
      "category": "Next.js",
      "image": "/blog/router-guide-next-js.png",
      "slug": "nextjs-13-app-router-complete-guide",
      "tags": ["Next.js", "React", "Routing"]
    },
    {
      "id": 6,
      "title": "Laravel 10: What's New and Improved",
      "content": "<p>Explore the new features and improvements in Laravel 10.</p>\n\n<h2>Process Isolation for Pest Tests</h2>\n<p>Laravel 10 introduces process isolation for Pest tests, allowing each test to run in its own process. This prevents state leakage between tests and makes debugging easier.</p>\n\n<h2>New Laravel Pennant Feature Flags</h2>\n<p>Laravel Pennant is a new feature flag system that allows you to conditionally enable features for specific users or groups:</p>\n<pre><code>// Check if a feature is active for the current user\nif (Feature::active('new-dashboard')) {\n    return view('new-dashboard');\n}\n\n// Enable a feature for specific users\nFeature::for($user)->activate('new-dashboard');</code></pre>\n\n<h2>Improved Validation</h2>\n<p>Laravel 10 adds new validation rules:</p>\n<ul>\n  <li><code>missing</code> - The field must not be present in the input data</li>\n  <li><code>missing_if</code> - The field must not be present if another field has a specific value</li>\n  <li><code>missing_unless</code> - The field must not be present unless another field has a specific value</li>\n</ul>\n\n<h2>New Artisan Command Generator</h2>\n<p>Creating custom Artisan commands is now easier with the new command generator:</p>\n<pre><code>php artisan make:command ShowAppInfo --command=app:info</code></pre>\n\n<h2>Native Type Declarations</h2>\n<p>Laravel 10 adds native type declarations to the framework's codebase, improving IDE support and catching type-related errors earlier.</p>\n\n<h2>Invokable Validation Rules</h2>\n<p>You can now create invokable validation rules:</p>\n<pre><code>class IsValidSubscription\n{\n    public function __invoke($attribute, $value, $fail)\n    {\n        if (!$this->isValidSubscription($value)) {\n            $fail('The :attribute is not a valid subscription.');\n        }\n    }\n    \n    protected function isValidSubscription($value)\n    {\n        // Validation logic here\n    }\n}</code></pre>\n\n<h2>Horizon Improvements</h2>\n<p>Laravel Horizon now includes improved metrics and a redesigned dashboard for better queue monitoring.</p>\n\n<h2>Conclusion</h2>\n<p>Laravel 10 continues the tradition of providing elegant improvements to the framework. With better testing tools, feature flags, and improved type safety, Laravel 10 makes building robust applications even easier.</p>",
      "author": "Abdullah Esha",
      "authorImage": "/abdullah-circle.png",
      "date": "July 20, 2023",
      "readTime": "6 min read",
      "category": "Laravel",
      "image": "/blog/laravel-project.jpg",
      "slug": "laravel-10-whats-new-and-improved",
      "tags": ["Laravel", "PHP", "Framework"]
    },
    {
      "id": 7,
      "title": "AWS EC2 Deployment Guide for Node.js Applications",
      "content": "<p>Learn how to deploy and maintain Node.js applications on AWS EC2.</p>\n\n<h2>Setting Up an EC2 Instance</h2>\n<p>Start by launching an EC2 instance:</p>\n<ol>\n  <li>Log in to the AWS Management Console</li>\n  <li>Navigate to EC2 and click \"Launch Instance\"</li>\n  <li>Choose Amazon Linux 2 AMI</li>\n  <li>Select an instance type (t2.micro is eligible for free tier)</li>\n  <li>Configure instance details, add storage, and tags</li>\n  <li>Configure security group to allow SSH (port 22) and HTTP/HTTPS (ports 80/443)</li>\n  <li>Review and launch with a new or existing key pair</li>\n</ol>\n\n<h2>Connecting to Your Instance</h2>\n<p>Connect to your instance using SSH:</p>\n<pre><code>ssh -i your-key.pem ec2-user@your-instance-public-dns</code></pre>\n\n<h2>Installing Node.js</h2>\n<p>Install Node.js on your EC2 instance:</p>\n<pre><code># Update the system\nsudo yum update -y\n\n# Install Node.js using Node Version Manager (nvm)\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash\nsource ~/.bashrc\nnvm install 16\nnode -v</code></pre>\n\n<h2>Deploying Your Application</h2>\n<p>Clone your repository and install dependencies:</p>\n<pre><code>git clone https://github.com/yourusername/your-repo.git\ncd your-repo\nnpm install</code></pre>\n\n<h2>Running Your Application with PM2</h2>\n<p>Use PM2 to keep your application running:</p>\n<pre><code># Install PM2\nnpm install -g pm2\n\n# Start your application\npm2 start app.js\n\n# Configure PM2 to start on system boot\npm2 startup\n# Run the command that PM2 outputs\n\n# Save the current PM2 process list\npm2 save</code></pre>\n\n<h2>Setting Up Nginx as a Reverse Proxy</h2>\n<p>Install and configure Nginx:</p>\n<pre><code># Install Nginx\nsudo yum install nginx -y\n\n# Start Nginx\nsudo systemctl start nginx\nsudo systemctl enable nginx\n\n# Configure Nginx as a reverse proxy\nsudo nano /etc/nginx/conf.d/app.conf</code></pre>\n\n<p>Add this configuration:</p>\n<pre><code>server {\n    listen 80;\n    server_name your-domain.com www.your-domain.com;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n}</code></pre>\n\n<p>Restart Nginx:</p>\n<pre><code>sudo systemctl restart nginx</code></pre>\n\n<h2>Setting Up SSL with Certbot</h2>\n<p>Secure your application with SSL:</p>\n<pre><code># Install Certbot\nsudo amazon-linux-extras install epel -y\nsudo yum install certbot python-certbot-nginx -y\n\n# Obtain and install SSL certificate\nsudo certbot --nginx -d your-domain.com -d www.your-domain.com</code></pre>\n\n<h2>Automating Deployments</h2>\n<p>Create a simple deployment script:</p>\n<pre><code>#!/bin/bash\n\ncd ~/your-repo\ngit pull\nnpm install\npm2 restart app</code></pre>\n\n<h2>Conclusion</h2>\n<p>By following this guide, you've set up a robust Node.js deployment on AWS EC2. Your application is running with PM2 for process management, Nginx as a reverse proxy, and SSL for security. This setup provides a solid foundation for running production Node.js applications.</p>",
      "author": "Abdullah Esha",
      "authorImage": "/abdullah-circle.png",
      "date": "August 10, 2023",
      "readTime": "8 min read",
      "category": "AWS",
      "image": "/blog/aws-guide.png",
      "slug": "aws-ec2-deployment-guide-nodejs-applications",
      "tags": ["AWS", "EC2", "Node.js"]
    }
  ]
}
